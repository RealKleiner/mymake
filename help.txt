How to use mymake:

See install.txt for setup instructions.

-Introduction

Mymake is a tool to compile c++ programs without the need for makefiles. Makefiles
are used to help the developer to keep track of depencies in order to avoid
compiling the entire codebase every time a change is made. Usually when not using
makefiles, the developer either has to keep track of depencies manually or the
developer has to rebuild the entire codebase. This quickly becomes a major headache
as the project grows bigger.

Makefiles also have their downsides. They have to be maintained. When adding a
a depency (#include), the developer have to update the makefile to reflect the
changes.

Mymake let the developer get the best of both sides. Mymake automatically tracks
depencies of the c++-source and does a minimal rebuild. Mymake is also designed
to make compiling and testing the program a one-step process if desired. Mymake
is even designed to allow multiple main-functions in the same project (though not
in the same file), which allows for easier testing of the code.


-Compiling

When compiling code, mymake examines the root c++-file passed to mymake and
looks for included files. When a file is included, mymake looks for its
corresponding implementation file by replacing .h with any of the defined
extensions (usually .cpp, .cc, ...). If a implementation file is found, it
is enqueued for compilation.

This gives mymake a list of implementation files to compile. However, mymake 
does not compile files if they have not changed since the last compilation. 
Therefore mymake makes a list of all included files from the implementation files
and their includes as well. Then mymake determines the latest modified date
in that list and compares it with the date of the last compiled object (.o) file
to see if recompilation is neccessary.

When all files in the list have been examined, mymake determines the latest
date of the files and compares it to the date of the executable file. Again,
if the executable is older than the newest object-file, mymake links the
program.

Last, if no compilation errors have occured, mymake executes the compiled
program with the supplied command-line arguments (if enabled).

If a compilation error occurs, compilation is stopped after the first file
containing compilation errors.

Mymake keeps all intermediate files in a user-defined build-directory, together
with a cache for the include files.


-Requirements

To work, mymake makes a few assumptions about the files it is to compile:

>A header file is always defining the contents of the implementation file
with the same name.
For example: the file list.h declares the content of list.cpp

>No files may include implementation files.
Including implementation files (.cpp, .cc) does not prevent mymake itself
from working, however the linker will fail if the same function is present
in two separate object files. Actually, including implementation files is not
a problem as long as the included files does not contain implementations.

All these requirements should not be too unreasonable to follow, since they
are common practice anyway.


-Multiple main()

Since mymake is supplied with a single c++-file, mymake can easily be used
to compile differend executables with differend main-functions. This is
usefull when testing your application among other things.

The only requirement to utilize this feature is that the differend files
containing different main()-functions does not #include each other. Since
mymake examines includes to determine which files to compile and link
together, neither mymake nor the c++ compiler will know of the existence
of any other main()-functions and therefore compilation will not fail.

